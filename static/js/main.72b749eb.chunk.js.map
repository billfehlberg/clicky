{"version":3,"sources":["components/PlanetCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/PScore/PScore.js","components/TScore/index.js","components/Footer/index.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["PlanetCard","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Wrapper","children","Navbar","PScore","TScore","Footer","Title","App","state","Planets","score","topScore","message","clicked","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledPlanets","array","i","length","j","Math","floor","random","_ref","shufflePlanets","this","_this2","components_Wrapper","components_Navbar","PScore_PScore","components_TScore","components_Title_Title","map","planet","components_PlanetCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72b749eb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction PlanetCard(props) {\n  return (\n    <div className=\"card\">\n      <div onClick={() => props.handleClick(props.id) } className=\"img-container\">\n        <img alt={props.name} src={props.image}/>\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default PlanetCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return <h1 className=\"navbar\">{props.children}</h1>;\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction PScore(props) {\n  return <h1 className=\"Pscore\">{props.children}</h1>;\n}\n\nexport default PScore;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TScore(props) {\n  return <h1 className=\"Tscore\">{props.children}</h1>;\n}\n\nexport default TScore;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n  return <h3>{props.children}</h3>;\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\n//this component is only rendering the images to the screen and can be a simple render function it is a\n//stateless component\nconst Title = props => (\n  <div className=\"titleText\">\n    <h3>Select any planet only once. Select all 9 correctly and you win!!!</h3>\n  </div>\n);\n\nexport default Title;","import React, { Component } from 'react';\nimport './App.css';\nimport PlanetCard from \"./components/PlanetCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport PScore from \"./components/PScore\";\nimport TScore from \"./components/TScore\";\nimport Footer from \"./components/Footer\";\nimport Planets from \"./planets.json\";\nimport Title from \"./components/Title\";\n\nfunction shufflePlanets(array) {\n for (let i = array.length - 1; i > 0; i--) {\n   let j = Math.floor(Math.random() * (i + 1));\n   [array[i], array[j]] = [array[j], array[i]];\n }\n return array;\n};\n\n\nclass App extends Component {\n  state = {\n    Planets,\n    score: 0,\n    topScore: 0,\n    message: \"Pick Any Planet To Begin\",\n    clicked: []\n  };\n  componentDidMount() {\n    this.handleShuffle();\n  }\n\n  handleClick = (id) => {\n    if (this.state.clicked.indexOf(id) === -1)  {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat([id])});\n    } else  {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      message: \"correct select another planet\"\n    });\n    if (newScore >= this.state.topScore)  {\n      this.setState({ topScore: newScore })\n    }\n    if (newScore === 9) {\n      this.setState({ message: \"you beat the game, select a planet begin again\" });\n    }\n    this.handleShuffle();\n  }\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      topScore: this.state.topScore,\n      clicked: [],\n      message: \"Game Over. Please select a planet to begin\"\n    })\n  };\n\n  handleShuffle = () => {\n    let shuffledPlanets = shufflePlanets(Planets);\n    this.setState({ Planets: shuffledPlanets });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n          <div className=\"container\">\n            <div className=\"row topRow rounded-top bg-secondary text-center\">\n              <div className=\"col\"><Navbar>Planet <br></br>Clicker</Navbar></div>\n              <div className=\"col-5 Title\"><Navbar>{this.state.message}</Navbar></div>\n              <div className=\"col bg-info\"><PScore>Player Score: {this.state.score} </PScore></div>\n              <div className=\"col bg-info\"><TScore>Top Score: {this.state.topScore}</TScore></div>\n            </div>\n            <div className=\"row titleRow bg-primary text-center\">\n              <div className=\"col\"><Title></Title></div>\n            </div>\n            <div className=\"row bg-secondary d-flex justify-content-center\">\n            {this.state.Planets.map(planet => (\n                <PlanetCard \n                  handleClick={this.handleClick}\n                  id={planet.id}\n                  key={planet.id}\n                  name={planet.name}\n                  image={planet.image}\n                  />\n              ))}\n            </div>\n            <div className=\"row bg-primary rounded-bottom text-center\">\n              <div className=\"col\"><Footer>Bill Fehlberg</Footer></div>\n            </div>\n          </div>\n        </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}